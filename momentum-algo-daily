import os
import pandas as pd
from datetime import datetime, timedelta
from dotenv import load_dotenv
from alpaca_trade_api.rest import REST, TimeFrame

load_dotenv()

API_KEY = os.getenv("APCA_API_KEY_ID")
SECRET_KEY = os.getenv("APCA_API_SECRET_KEY")
BASE_URL = os.getenv("APCA_API_BASE_URL")
TICKERS = os.getenv("TICKERS", "").split(",")

client = REST(API_KEY, SECRET_KEY, BASE_URL)

MOMENTUM_THRESHOLD = 3.0  # Daily % gain to trigger buy
POSITION_SIZE = 100  # Dollars per trade


def get_daily_data(symbol, days=10):
    end = (datetime.utcnow() - timedelta(minutes=1500)).date().isoformat()
    start = (datetime.utcnow() - timedelta(days=days + 2, minutes=15)).date().isoformat()
    try:
        df = client.get_bars(
            symbol,
            TimeFrame.Day,
            start=start,
            end=end
        ).df
        return df
    except Exception as e:
        print(f"Error getting data for {symbol}: {e}")
        return pd.DataFrame()



def calculate_momentum(df):
    if len(df) < 2:
        return 0
    return ((df["close"].iloc[-1] - df["close"].iloc[0]) / df["close"].iloc[0]) * 100


def get_position(symbol):
    try:
        position = client.get_position(symbol)
        return float(position.qty)
    except:
        return 0.0


def place_order(symbol, side, qty):
    print(f"Placing {side} order for {qty} shares of {symbol}")
    client.submit_order(
        symbol=symbol, qty=qty, side=side, type="market", time_in_force="gtc"
    )


def run_daily_strategy():
    for symbol in TICKERS:
        print(f"\nChecking {symbol}...")
        df = get_daily_data(symbol)
        if df.empty:
            continue

        momentum = calculate_momentum(df)
        recent_close = df["close"].iloc[-1]
        recent_volume = df["volume"].iloc[-1]
        avg_volume = df["volume"].mean()
        position_qty = get_position(symbol)

        print(
            f"Momentum: {momentum:.2f}% | Volume: {recent_volume} | Avg Vol: {avg_volume:.0f} | Position: {position_qty}"
        )

        if (
            momentum > MOMENTUM_THRESHOLD
            and recent_volume > avg_volume
            and position_qty == 0
        ):
            qty = max(1, int(POSITION_SIZE / recent_close))
            place_order(symbol, "buy", qty)
        elif momentum < 0 and position_qty > 0:
            place_order(symbol, "sell", int(position_qty))


if __name__ == "__main__":
    run_daily_strategy()
